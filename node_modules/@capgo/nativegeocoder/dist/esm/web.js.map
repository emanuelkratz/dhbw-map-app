{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from \"@capacitor/core\";\n\nimport type {\n  NativeGeocoderPlugin,\n  ReverseOptions,\n  ForwardOptions,\n  Address,\n} from \"./definitions\";\n\ninterface AddressComponent {\n  long_name: string;\n  short_name: string;\n  types: string[];\n}\ninterface GeocoderResult {\n  address_components: AddressComponent[];\n  formatted_address: string;\n  geometry: {\n    location: {\n      lat: number;\n      lng: number;\n    };\n    location_type: string;\n    viewport: {\n      northeast: {\n        lat: number;\n        lng: number;\n      };\n      southwest: {\n        lat: number;\n        lng: number;\n      };\n    };\n  };\n}\ninterface GeocoderPayload {\n  plus_code: {\n    compound_code: string;\n    global_code: string;\n  };\n  results: GeocoderResult[];\n}\n\nconst findAC = (\n  address_components: AddressComponent[],\n  type: string,\n): AddressComponent => {\n  return (\n    address_components.find((component) => component.types.includes(type)) || {\n      long_name: \"\",\n      short_name: \"\",\n      types: [],\n    }\n  );\n};\nexport class NativeGeocoderWeb\n  extends WebPlugin\n  implements NativeGeocoderPlugin\n{\n  async reverseGeocode(\n    options: ReverseOptions,\n  ): Promise<{ addresses: Address[] }> {\n    if (!options.apiKey) {\n      throw new Error(\"apiKey is required for web\");\n    }\n    const params = {\n      latlng: `${options.latitude},${options.longitude}`,\n      key: options.apiKey,\n      ...(options.defaultLocale && { language: options.defaultLocale }),\n      result_type: options.resultType || \"street_address\",\n    };\n    return fetch(\n      `https://maps.googleapis.com/maps/api/geocode/json?${new URLSearchParams(\n        params,\n      ).toString()}`,\n    )\n      .then((response) => response.json())\n      .then((data: GeocoderPayload): { addresses: Address[] } => {\n        return {\n          addresses: data.results\n            .map((result: GeocoderResult): Address => {\n              // transform the response in Address[]\n              // use the result from google geocoder and transform it in Address\n\n              return {\n                latitude: result.geometry.location.lat,\n                longitude: result.geometry.location.lng,\n                countryCode: findAC(result.address_components, \"country\")\n                  .short_name,\n                countryName: findAC(result.address_components, \"country\")\n                  .long_name,\n                postalCode: findAC(result.address_components, \"postal_code\")\n                  .long_name,\n                administrativeArea: findAC(\n                  result.address_components,\n                  \"administrative_area_level_1\",\n                ).long_name,\n                subAdministrativeArea: findAC(\n                  result.address_components,\n                  \"administrative_area_level_2\",\n                ).long_name,\n                locality: findAC(result.address_components, \"locality\")\n                  .long_name,\n                subLocality: findAC(result.address_components, \"sublocality\")\n                  .long_name,\n                thoroughfare: findAC(result.address_components, \"route\")\n                  .long_name,\n                subThoroughfare: findAC(\n                  result.address_components,\n                  \"street_number\",\n                ).long_name,\n                areasOfInterest: [],\n              };\n            })\n            .slice(0, options.maxResults || 1),\n        };\n      });\n  }\n  async forwardGeocode(\n    options: ForwardOptions,\n  ): Promise<{ addresses: Address[] }> {\n    if (!options.apiKey) {\n      throw new Error(\"apiKey is required for web\");\n    }\n    const params = {\n      address: options.addressString,\n      key: options.apiKey,\n      ...(options.defaultLocale && { language: options.defaultLocale }),\n      result_type: \"street_address\",\n    };\n    return fetch(\n      `https://maps.googleapis.com/maps/api/geocode/json?${new URLSearchParams(\n        params,\n      ).toString()}`,\n    )\n      .then((response) => response.json())\n      .then((data: GeocoderPayload): { addresses: Address[] } => {\n        return {\n          addresses: data.results\n            .map((result: GeocoderResult): Address => {\n              // transform the response in Address[]\n              // use the result from google geocoder and transform it in Address\n              return {\n                latitude: result.geometry.location.lat,\n                longitude: result.geometry.location.lng,\n                countryCode: findAC(result.address_components, \"country\")\n                  .short_name,\n                countryName: findAC(result.address_components, \"country\")\n                  .long_name,\n                postalCode: findAC(result.address_components, \"postal_code\")\n                  .long_name,\n                administrativeArea: findAC(\n                  result.address_components,\n                  \"administrative_area_level_1\",\n                ).long_name,\n                subAdministrativeArea: findAC(\n                  result.address_components,\n                  \"administrative_area_level_2\",\n                ).long_name,\n                locality: findAC(result.address_components, \"locality\")\n                  .long_name,\n                subLocality: findAC(result.address_components, \"sublocality\")\n                  .long_name,\n                thoroughfare: findAC(result.address_components, \"route\")\n                  .long_name,\n                subThoroughfare: findAC(\n                  result.address_components,\n                  \"street_number\",\n                ).long_name,\n                areasOfInterest: [],\n              };\n            })\n            .slice(0, options.maxResults || 1),\n        };\n      });\n  }\n}\n"]}