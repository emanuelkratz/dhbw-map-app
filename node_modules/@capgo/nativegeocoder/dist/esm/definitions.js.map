{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export interface Address {\n  latitude: number;\n  longitude: number;\n  countryCode: string;\n  countryName: string;\n  postalCode: string;\n  administrativeArea: string;\n  subAdministrativeArea: string;\n  locality: string;\n  subLocality: string;\n  thoroughfare: string;\n  subThoroughfare: string;\n  areasOfInterest: string[];\n}\n\nexport interface ForwardOptions {\n  /**\n   * address is a string of the address to be geocoded.\n   */\n  addressString: string;\n  /**\n   * Localise the results to the given locale.\n   */\n  useLocale?: boolean;\n  /**\n   * locale is a string in the format of language_country, for example en_US.\n   */\n  defaultLocale?: string;\n  /**\n   * Max number of results to return.\n   */\n  maxResults?: number;\n  /**\n   * Only used for web platform to use google api\n   */\n  apiKey?: string;\n}\nexport interface ReverseOptions {\n  /**\n   * latitude is a number representing the latitude of the location.\n   */\n  latitude: number;\n  /**\n   * longitude is a number representing the longitude of the location.\n   */\n  longitude: number;\n  /**\n   * Localise the results to the given locale.\n   */\n  useLocale?: boolean;\n  /**\n   * locale is a string in the format of language_country, for example en_US.\n   */\n  defaultLocale?: string;\n  /**\n   * Max number of results to return.\n   */\n  maxResults?: number;\n  /**\n   * Only used for web platform to use google api\n   */\n  apiKey?: string;\n  /**\n   * Only used for web platform to use google api\n   */\n  resultType?: string;\n}\nexport interface NativeGeocoderPlugin {\n  /**\n   * Convert latitude and longitude to an address\n   *\n   * @param id The bundle id to delete (note, this is the bundle id, NOT the version name)\n   * @returns {Promise<{addresses: Address[]}>} an Promise with the list of addresses according to maxResults\n   * @throws An error if the something went wrong\n   * @since 0.0.1\n   */\n  reverseGeocode(options: ReverseOptions): Promise<{ addresses: Address[] }>;\n  /**\n   * Convert an address to latitude and longitude\n   *\n   * @returns {Promise<{addresses: Address[]}>} an Promise with the list of addresses according to maxResults\n   * @throws An error if the something went wrong\n   * @since 0.0.1\n   */\n  forwardGeocode(options: ForwardOptions): Promise<{ addresses: Address[] }>;\n}\n"]}